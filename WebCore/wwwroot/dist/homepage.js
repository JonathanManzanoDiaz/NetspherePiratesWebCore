webpackJsonp([0],{

/***/ 139:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
exports.__esModule = true;
var React = __webpack_require__(0);
var ReactBootstrap = __webpack_require__(44);
var Carousel = ReactBootstrap.Carousel;
var CarouselX = /** @class */function (_super) {
    __extends(CarouselX, _super);
    function CarouselX() {
        var _this = _super.call(this) || this;
        _this.state = {
            childs: []
        };
        return _this;
    }
    CarouselX.prototype.componentDidMount = function () {
        var _this = this;
        fetch(this.props.data).then(function (resp) {
            return resp.json();
        }).then(function (dat) {
            var DChilds = dat.map(function (row, index) {
                return React.createElement(Carousel.Item, { key: index }, React.createElement("img", { width: 900, height: 500, alt: "900x500", src: row.src }), React.createElement(Carousel.Caption, null, React.createElement("h3", null, row.title), React.createElement("p", null, row.text)));
            });
            _this.setState({ childs: DChilds });
            console.log(dat.length);
        });
    };
    CarouselX.prototype.render = function () {
        return React.createElement(Carousel, null, this.state.childs);
    };
    return CarouselX;
}(React.Component);
exports["default"] = CarouselX;

/***/ }),

/***/ 140:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
exports.__esModule = true;
var React = __webpack_require__(0);
var ReactBootstrap = __webpack_require__(44);
var Panel = ReactBootstrap.Panel;
var ListGroup = ReactBootstrap.ListGroup;
var ListGroupItem = ReactBootstrap.ListGroupItem;
var News = /** @class */function (_super) {
    __extends(News, _super);
    function News() {
        var _this = _super.call(this) || this;
        _this.state = {
            news: [],
            events: []
        };
        return _this;
    }
    News.prototype.componentDidMount = function () {
        var _this = this;
        var dataset = fetch(this.props.data).then(function (results) {
            return results.json();
        });
        dataset.then(function (data) {
            var NewsList = data.news.map(function (row, index) {
                return React.createElement(ListGroupItem, { key: index, header: row.title }, row.text);
            });
            var EventsList = data.events.map(function (row, index) {
                return React.createElement(ListGroupItem, { key: index, header: row.title }, row.text);
            });
            _this.setState({
                news: NewsList,
                events: EventsList
            });
        });
    };
    News.prototype.render = function () {
        return React.createElement("div", { className: "News" }, React.createElement(Panel, null, React.createElement(Panel.Heading, null, "Noticias"), React.createElement(Panel.Body, null, React.createElement(ListGroup, null, this.state.news))), React.createElement(Panel, null, React.createElement(Panel.Heading, null, "Eventos"), React.createElement(Panel.Body, null, React.createElement(ListGroup, null, this.state.events))));
    };
    return News;
}(React.Component);
exports["default"] = News;

/***/ }),

/***/ 143:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var ReactDOM = __webpack_require__(11);
var React = __webpack_require__(0);
var News_1 = __webpack_require__(140);
var Carrousel_1 = __webpack_require__(139);
var newsLayer = document.getElementById('react-homepage-root');
var carouselLayer = document.getElementById('react-carousel');
ReactDOM.render(React.createElement(News_1["default"], { data: newsLayer.getAttribute('news') }), newsLayer);
ReactDOM.render(React.createElement(Carrousel_1["default"], { data: carouselLayer.getAttribute('news') }), carouselLayer);

/***/ })

},[143]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,